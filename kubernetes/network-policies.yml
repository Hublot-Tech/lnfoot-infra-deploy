apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: default-deny-all-ingress # Changed to default-deny-all-ingress for clarity
  # namespace: lnfoot-app # Uncomment and set if deploying to a specific namespace
spec:
  podSelector: {} # Selects all pods in the namespace
  policyTypes:
  - Ingress
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-postgres-access
  # namespace: lnfoot-app
spec:
  podSelector:
    matchLabels:
      app: postgres # Target: postgres-deployment pods
  policyTypes:
  - Ingress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: api
    - podSelector:
        matchLabels:
          app: keycloak
    ports:
    - protocol: TCP
      port: 5432
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-keycloak-access
  # namespace: lnfoot-app
spec:
  podSelector:
    matchLabels:
      app: keycloak # Target: keycloak-deployment pods
  policyTypes:
  - Ingress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: api # API needs to talk to Keycloak for token validation etc.
    # Assuming Ingress controller will forward traffic to Keycloak.
    # This rule allows traffic from any pod in any namespace.
    # TODO: Restrict this to only allow traffic from the Ingress controller pods.
    # Example for Nginx Ingress (if in 'ingress-nginx' namespace with specific labels):
    # - namespaceSelector:
    #     matchLabels:
    #       kubernetes.io/metadata.name: ingress-nginx
    #   podSelector:
    #     matchLabels:
    #       app.kubernetes.io/name: ingress-nginx
    - {} # Placeholder: Allows Ingress from anywhere. Refine this.
    ports:
    - protocol: TCP
      port: 8080
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-minio-access
  # namespace: lnfoot-app
spec:
  podSelector:
    matchLabels:
      app: minio # Target: minio-deployment pods
  policyTypes:
  - Ingress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: api # API needs to talk to Minio API
    # Assuming Ingress controller will forward traffic to Minio.
    # TODO: Restrict this to only allow traffic from the Ingress controller pods.
    - {} # Placeholder: Allows Ingress from anywhere. Refine this.
    ports:
    - protocol: TCP
      port: 9000 # Minio API
    - protocol: TCP
      port: 9001 # Minio Console
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-api-access
  # namespace: lnfoot-app
spec:
  podSelector:
    matchLabels:
      app: api # Target: api-deployment pods
  policyTypes:
  - Ingress
  ingress:
  # Assuming Ingress controller will forward traffic to the API.
  # TODO: Restrict this to only allow traffic from the Ingress controller pods.
  - {} # Placeholder: Allows Ingress from anywhere. Refine this.
    ports:
    - protocol: TCP
      port: 8080
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: default-deny-all-egress # Deny all egress traffic by default
  # namespace: lnfoot-app
spec:
  podSelector: {}
  policyTypes:
  - Egress
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-dns-egress # Allow DNS (port 53) to all pods for name resolution
  # namespace: lnfoot-app
spec:
  podSelector: {} # Apply to all pods
  policyTypes:
  - Egress
  egress:
  - to: # No specific 'to', implies to any IP, typically kube-dns service IP
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP # DNS can also use TCP
      port: 53
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-api-external-egress # Allow API to talk to external services
  # namespace: lnfoot-app
spec:
  podSelector:
    matchLabels:
      app: api
  policyTypes:
  - Egress
  egress:
  # Allow to NotchPay API
  - to:
    # This would ideally be a CIDR block for api.notchpay.co if stable and known.
    # For now, allowing all egress on 443; can be refined.
    # Example: - ipBlock: { cidr: "x.x.x.x/y" }
    ports:
    - protocol: TCP
      port: 443 # HTTPS to NotchPay
  # Allow to Keycloak (if Keycloak is external or in a different namespace not covered by pod selectors)
  # For Keycloak service within the cluster, this might not be needed if pod-to-pod is default allowed
  # or if Keycloak is in the same namespace and DNS is working.
  # However, if Keycloak is accessed via an external URL by the API:
  - to: {} # Placeholder for external Keycloak if needed, or remove if KC is internal
    ports:
    - protocol: TCP
      port: 80 # Or 443 if HTTPS to Keycloak
      # port: 8080 # If API talks to Keycloak service directly on its port
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-keycloak-postgres-egress
  # namespace: lnfoot-app
spec:
  podSelector:
    matchLabels:
      app: keycloak
  policyTypes:
  - Egress
  egress:
  - to:
    - podSelector: # Allow to Postgres
        matchLabels:
          app: postgres
    ports:
    - protocol: TCP
      port: 5432
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-minio-itself-egress # Minio might need to talk to itself (localhost) during startup/mc commands
  # namespace: lnfoot-app
spec:
  podSelector:
    matchLabels:
      app: minio
  policyTypes:
  - Egress
  egress:
  - to:
    - podSelector: # Allow egress to itself
        matchLabels:
          app: minio
    ports:
    - protocol: TCP
      port: 9000 # API
    - protocol: TCP
      port: 9001 # Console
# Note on Ingress Controller Access:
# The 'from: {}' rules in allow-keycloak-access, allow-minio-access, and allow-api-access
# are overly permissive for Ingress traffic. These should be updated to specifically
# allow traffic ONLY from the Ingress controller pods (e.g., using namespaceSelector
# and podSelector targeting the Ingress controller).

# Note on Egress:
# A 'default-deny-all-egress' is added. Specific egress rules are then needed.
# - DNS is allowed for all.
# - API is allowed to talk to external services (e.g., NotchPay on port 443).
# - Keycloak is allowed to talk to Postgres.
# - Minio is allowed to talk to itself (for entrypoint script operations).
# Egress to other cluster services (like Postgres from API) is implicitly handled if they are in the same namespace
# and no specific egress deny would block it. If services are in different namespaces, specific
# 'to' clauses with namespaceSelectors might be needed in egress policies.
# The current setup assumes services are in the same namespace for podSelector to work in egress.
