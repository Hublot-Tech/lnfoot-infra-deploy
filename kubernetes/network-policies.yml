apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: default-deny-all-ingress
  namespace: lnfoot-app
spec:
  podSelector: {} # Selects all pods in the namespace
  policyTypes:
  - Ingress
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: default-deny-all-egress
  namespace: lnfoot-app
spec:
  podSelector: {} # Selects all pods
  policyTypes:
  - Egress
  egress: [] # Deny all egress traffic by default
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-postgres-access
  namespace: lnfoot-app
spec:
  podSelector:
    matchLabels:
      app: postgres # Target: postgres-deployment pods
  policyTypes:
  - Ingress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: api
    - podSelector:
        matchLabels:
          app: keycloak
    ports:
    - protocol: TCP
      port: 5432
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-keycloak-access
  namespace: lnfoot-app
spec:
  podSelector:
    matchLabels:
      app: keycloak # Target: keycloak-deployment pods
  policyTypes:
  - Ingress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: api # API to Keycloak internal communication
    # For external access via Ingress controller
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: ingress-nginx # Or your ingress controller's namespace
      podSelector:
        matchLabels:
          app.kubernetes.io/name: ingress-nginx # Or labels for your ingress controller pods
    ports:
    - protocol: TCP
      port: 8080
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-minio-access
  namespace: lnfoot-app
spec:
  podSelector:
    matchLabels:
      app: minio # Target: minio-deployment pods
  policyTypes:
  - Ingress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: api # API to Minio internal communication
    # For external access via Ingress controller
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: ingress-nginx
      podSelector:
        matchLabels:
          app.kubernetes.io/name: ingress-nginx
    ports:
    - protocol: TCP
      port: 9000 # Minio API
    - protocol: TCP
      port: 9001 # Minio Console
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-api-access
  namespace: lnfoot-app
spec:
  podSelector:
    matchLabels:
      app: api # Target: api-deployment pods
  policyTypes:
  - Ingress
  ingress:
  - from:
    # For external access via Ingress controller
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: ingress-nginx
      podSelector:
        matchLabels:
          app.kubernetes.io/name: ingress-nginx
    ports:
    - protocol: TCP
      port: 8080
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-dns-egress
  namespace: lnfoot-app
spec:
  podSelector: {} # Apply to all pods in the namespace
  policyTypes:
  - Egress
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: kube-system # Or the namespace where your DNS service runs
      podSelector:
        matchLabels:
          k8s-app: kube-dns # Standard label for kube-dns pods
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-api-egress
  namespace: lnfoot-app
spec:
  podSelector:
    matchLabels:
      app: api
  policyTypes:
  - Egress
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: postgres
    ports:
    - protocol: TCP
      port: 5432
  - to:
    - podSelector:
        matchLabels:
          app: minio
    ports:
    - protocol: TCP
      port: 9000
  - to:
    - podSelector:
        matchLabels:
          app: keycloak
    ports:
    - protocol: TCP
      port: 8080
  - to:
    # For NotchPay and other external services.
    # WARNING: This allows egress to ANY IP on port 443.
    # For production, it's CRITICAL to restrict this further using:
    # 1. `ipBlock` with specific CIDRs for external services if their IPs are stable.
    #    Example:
    #    - ipBlock:
    #        cidr: "1.2.3.4/32" # Replace with actual NotchPay IP/CIDR
    # 2. FQDN policies if your CNI supports them (e.g., Cilium, Calico).
    # 3. An egress gateway that can filter traffic based on FQDN.
    # If using ipBlock, ensure `except` clauses are used to avoid matching internal ranges.
    ports:
    - protocol: TCP
      port: 443 # HTTPS
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-keycloak-postgres-egress # Keycloak needs to talk to Postgres
  namespace: lnfoot-app
spec:
  podSelector:
    matchLabels:
      app: keycloak
  policyTypes:
  - Egress
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: postgres
    ports:
    - protocol: TCP
      port: 5432
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-minio-itself-egress # Minio entrypoint script uses mc against localhost
  namespace: lnfoot-app
spec:
  podSelector:
    matchLabels:
      app: minio
  policyTypes:
  - Egress
  egress:
  - to: # Allows Minio to talk to itself (its own pod)
    - podSelector:
        matchLabels:
          app: minio
    ports:
    - protocol: TCP
      port: 9000 # Minio API
    - protocol: TCP
      port: 9001 # Minio Console
# Notes:
# - All policies are now namespaced to 'lnfoot-app'.
# - Default deny for all ingress and egress is in place.
# - Ingress from the Ingress controller (assumed to be nginx in 'ingress-nginx' namespace)
#   is now explicitly allowed for Keycloak, Minio, and API services.
# - Egress for the API to other internal services (Postgres, Minio, Keycloak) and
#   to external services (NotchPay on port 443) is defined in 'allow-api-egress'.
#   The external egress rule for port 443 is broad and needs further restriction in production.
# - DNS egress is configured to allow pods to talk to 'kube-dns' in 'kube-system'.
# - Keycloak can talk to Postgres.
# - Minio can talk to itself (needed for its entrypoint script).
