apiVersion: v1
kind: ConfigMap
metadata:
  name: minio-config
data:
  entrypoint.sh: |
    #!/bin/sh
    set -e # Exit on first error

    # --- 1. Start MinIO server in the background using the passed arguments ---
    echo "Starting MinIO server in background with arguments: '$@'"
    /usr/bin/minio "$@" & # Use "$@" to pass the command arguments
    MINIO_PID=$! # Capture the Process ID of the background MinIO process

    # --- 2. Wait for MinIO server to be healthy ---
    echo "Waiting for MinIO server to become healthy..."
    MAX_RETRIES=20 # Max attempts to check MinIO health
    RETRY_COUNT=0
    # Use localhost for health check as MinIO is running in the same pod
    until curl -sS -f http://localhost:9000/minio/health/live; do
      echo "MinIO not ready (attempt $((RETRY_COUNT + 1))), retrying in 5 seconds..."
      sleep 5
      RETRY_COUNT=$((RETRY_COUNT + 1))
      if [ "$RETRY_COUNT" -ge "$MAX_RETRIES" ]; then
        echo "MinIO did not become healthy within the expected time. Exiting."
        kill $MINIO_PID # Kill the background MinIO process if it failed to start
        exit 1
      fi
    done
    echo "MinIO server is healthy and ready for configuration."

    # Configure mc alias to use localhost as MinIO is in the same pod
    echo "Setting up MinIO client (mc) alias 'myminio' for localhost..."
    mc alias set myminio http://localhost:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD}
    echo "MinIO alias 'myminio' set for localhost."

    # 4. Create the custom policy for the app client (read/write)
    echo "Creating custom policy '${APP_CLIENT_POLICY_NAME}' for app client..."
    if ! mc admin policy info myminio "${APP_CLIENT_POLICY_NAME}" >/dev/null 2>&1; then
        # The policy file is mounted at /app_client_policy.json
        mc admin policy create myminio "${APP_CLIENT_POLICY_NAME}" /app_client_policy.json
        echo "Policy '${APP_CLIENT_POLICY_NAME}' added."
    else
        echo "Policy '${APP_CLIENT_POLICY_NAME}' already exists."
    fi

    # 5. Create the app client user if it doesn't exist
    echo "Creating user '${APP_CLIENT_ACCESS_KEY}' if it doesn't exist..."
    if ! mc admin user info myminio "${APP_CLIENT_ACCESS_KEY}" >/dev/null 2>&1; then
        mc admin user add myminio "${APP_CLIENT_ACCESS_KEY}" "${APP_CLIENT_SECRET_KEY}"
        echo "User '${APP_CLIENT_ACCESS_KEY}' created."
    else
        echo "User '${APP_CLIENT_ACCESS_KEY}' already exists."
    fi

    # Attach the custom global read/write policy to the new user
    echo "Attaching policy '${APP_CLIENT_POLICY_NAME}' to user '${APP_CLIENT_ACCESS_KEY}'..."
    mc admin policy attach myminio "${APP_CLIENT_POLICY_NAME}" --user "${APP_CLIENT_ACCESS_KEY}" || true
    echo "Policy '${APP_CLIENT_POLICY_NAME}' attached to user '${APP_CLIENT_ACCESS_KEY}' (or already was)."


    echo "MinIO configuration complete."
    echo ""
    echo "========================================"
    # echo "  Public Access: Read-only (anonymous)" # This was for the old entrypoint, not configured here by default
    echo "  App Client Access Key: ${APP_CLIENT_ACCESS_KEY}"
    echo "  App Client Secret Key: ${APP_CLIENT_SECRET_KEY}"
    echo "========================================"
    echo "!!! MAKE SURE TO SAVE THE APP CLIENT SECRET KEY NOW. !!!"

    # --- Keep the background MinIO process alive ---
    echo "Keeping MinIO server alive (PID: $MINIO_PID)..."
    wait $MINIO_PID
  app-client-policy.json: |
    {
        "Version": "2012-10-17",
        "Statement": [
            {
                "Effect": "Allow",
                "Action": [
                    "s3:ListBucket",
                    "s3:GetObject",
                    "s3:PutObject",
                    "s3:DeleteObject",
                    "s3:CreateBucket",
                    "s3:PutBucketPolicy"
                ],
                "Resource": [
                    "arn:aws:s3:::*",
                    "arn:aws:s3:::*/*"
                ]
            }
        ]
    }
---
apiVersion: v1
kind: Secret
metadata:
  name: minio-secret
data:
  MINIO_ROOT_USER: bWluaW9hZG1pbg==
  MINIO_ROOT_PASSWORD: bWluaW9hZG1pbnBhc3N3b3Jk
  APP_CLIENT_POLICY_NAME: YXBwLWNsaWVudC1ydy1wb2xpY3k=
  APP_CLIENT_ACCESS_KEY: YXBwY2xpZW50dXNlcg==
  APP_CLIENT_SECRET_KEY: YXBwY2xpZW50cGFzc3dvcmQ=
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: minio-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi # Adjusted from 10Gi for now, can be increased
---
apiVersion: v1
kind: Service
metadata:
  name: minio-svc # Service DNS will be minio-svc.namespace.svc.cluster.local
spec:
  selector:
    app: minio
  ports:
    - name: api
      protocol: TCP
      port: 9000
      targetPort: 9000
    - name: console
      protocol: TCP
      port: 9001
      targetPort: 9001
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: minio-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: minio
  template:
    metadata:
      labels:
        app: minio
    spec:
      containers:
        - name: minio
          image: minio/minio
          command: ["/bin/sh", "/config/entrypoint.sh"]
          args: ["server", "/data", "--console-address", ":9001"]
          ports:
            - containerPort: 9000
              name: api
            - containerPort: 9001
              name: console
          envFrom:
            - secretRef:
                name: minio-secret
          volumeMounts:
            - name: minio-storage
              mountPath: /data
            - name: minio-config-volume # For entrypoint.sh
              mountPath: /config
            - name: minio-policy-volume # For app-client-policy.json
              mountPath: /app_client_policy.json # Path expected by entrypoint.sh
              subPath: app-client-policy.json    # Mount only this file from the ConfigMap
          livenessProbe:
            httpGet:
              path: /minio/health/live
              port: api # Use named port 'api' (9000)
            initialDelaySeconds: 30
            periodSeconds: 20
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /minio/health/ready
              port: api # Use named port 'api' (9000)
            initialDelaySeconds: 15
            periodSeconds: 15
            timeoutSeconds: 5
            failureThreshold: 3
      volumes:
        - name: minio-storage
          persistentVolumeClaim:
            claimName: minio-pvc
        - name: minio-config-volume
          configMap:
            name: minio-config
            items:
              - key: entrypoint.sh
                path: entrypoint.sh
            defaultMode: 0755 # Make the script executable
        - name: minio-policy-volume
          configMap:
            name: minio-config
            items:
              - key: app-client-policy.json
                path: app-client-policy.json
